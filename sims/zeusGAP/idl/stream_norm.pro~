function hdf, n, name

fileid = hdf_sd_start(name,/read)
sds = hdf_sd_select(fileid,n)
hdf_sd_getdata,sds,data

return, data

end

pro stream_norm, typ=type, loc=loc, start=start, finish=finish, azislice=azislice $
           ,xtickinterval=xtickinterval,length=length,red=red $
           , smallh=smallh, xrange=xrange, ytickinterval=ytickinterval $
           , yrange=yrange , direction=direction, hsize=hsize, vzonly=vzonly $
            ,vronly=vronly, log=log, plotrange0=plotrange0, ct=ct, arrcolor=arrcolor $
            , name=name, nopert=nopert,noflux=noflux, mp=mp, basic=basic, gmma=gmma, arrct=arrct, entropy=entropy $
            , psi=psi, azimode=azimode
; plot as theta-radius plane
; but modified theta co-ordinate (call psi)
; psi = 1/(h*tan(theta))
; h is aspect ratio at r=r0 (ref. rad)
; the scalar to be plotted is delta W/rho, normalized by its value at
; r=r0, z=0
  
  if not keyword_set(length) then length= 1.0
  if not keyword_set(ct) then ct=5

;get the basic info
  location =strcompress(loc,/remove_all)
  if not keyword_set(basic) then begin
     filename = strcompress('hdfaa.000',/remove_all)
  endif else begin
     name = string(basic,format='(I03)')
     filename = strcompress('hdfaa.'+name,/remove_all)
  endelse
  fileloc  = filepath(filename,root_dir='.',subdir=[location])
  
  
  rad  = hdf(2, fileloc)
  theta= hdf(1, fileloc)
  phi  = hdf(0, fileloc)
  
  nrad  = n_elements(rad)
  ntheta= n_elements(theta)
  nphi  = n_elements(phi)
  
  if not keyword_set(red) then begin
     red = [nrad, ntheta]
  endif

  vx   = dblarr(nrad, ntheta)
  vy   = dblarr(nrad, ntheta)
  machz= dblarr(nrad, ntheta, nphi)
  angle = dblarr(nrad, ntheta)

  
  data_axisymmetric = dblarr(nrad, ntheta)
  den2d = dblarr(nrad, ntheta)

  data0   = hdf(19, fileloc)    ;reference density field 
  for j=0, ntheta-1 do begin
     for i=0, nrad-1 do begin
        data_axisymmetric(i,j) = mean(data0(i,j,*))
     endfor
  endfor
  for k=0, nphi-1 do begin
     data0(*,*,k) = data_axisymmetric(*,*)
  endfor
  d0 = data0

  data0   = (gmma - 1d0)*hdf(23, fileloc)    ;reference pressure field 
  for j=0, ntheta-1 do begin
     for i=0, nrad-1 do begin
        data_axisymmetric(i,j) = mean(data0(i,j,*))
     endfor
  endfor
  for k=0, nphi-1 do begin
     data0(*,*,k) = data_axisymmetric(*,*)
  endfor
  p0 = data0

  csq = gmma*p0/d0

  if not keyword_set(finish) then finish = start
  
; planet info
  nlines = file_lines(filepath('planetxy_hdf.dat',root_dir='.',subdir=[location]))
  planetinfo = dblarr(7,nlines)
  openr, 1, filepath('planetxy_hdf.dat',root_dir='.',subdir=[location])
  readf,1,planetinfo
  close,1
  torb = 2d0*!dpi*planetinfo(1,0)^(3d0/2d0)
  
  for n=start, finish do begin
     ks   = string(n,format='(I03)')
     filename = strcompress('hdfaa.'+ks,/remove_all)
     fileloc  = filepath(filename,root_dir='.',subdir=[location])
    
     den  = hdf(19, fileloc)
     pres = (gmma-1d0)*hdf(23, fileloc)
     cs = sqrt(gmma*pres/den)

     vrad  = hdf(3, fileloc)
     vtheta= hdf(7, fileloc)
     
    ;work out W
     w = (pres - p0)/d0

    ; work out Q
     q = csq*(den-d0)/d0

     s = w-q  
     sbar = q - gmma*w

     if not keyword_set(noflux) then begin
        vrad   *= den
        vtheta *= den
     endif
     
     plx=planetinfo(1,n)
     ply=planetinfo(2,n)
     plz=planetinfo(3,n)
     plrad = sqrt(plx^2 + ply^2 + plz^2)
     if keyword_set(mp) then begin
        rh = plrad*(mp/3d0)^(1d0/3d)
        rplot = (rad - plrad)/rh
        xtitle = '(r-r_p)/r_h'
        temp = min(abs(rplot), rgrid)
     endif else begin
        rplot = rad/plrad
        xtitle = 'r/r_0'
        temp = min(abs(rplot - 1d0), rgrid)
     endelse 
     
     azi1 = azislice*nphi
     azi_center = azi1
 
     if keyword_set(psi) then begin
      azi1 = psi*!dpi/azimode + phi(azi1) 
      if (azi1 lt 0d0) then azi1 += 2d0*!dpi
      azi1*=nphi/(2d0*!dpi)  
     endif     
    
     for j=0, ntheta-1 do begin
        for i=0, nrad-1 do begin            
           
            sint = sin(theta(j))
            cost = cos(theta(j))


           vr = vrad(i,j,azi1)
           vt = vtheta(i,j,azi1)
          
           velx =   vr*sint + vt*cost 
           vely =   vr*cost - sint*vt 


           
           angle(i,j) = sqrt(vely^2/(vely^2+velx^2))
         

           if keyword_set(mp) then begin
              vx(i,j) = vr/rh   ;divide by rh if doing scaled radius
           endif else begin
              vx(i,j) = vr/plrad
           endelse
           
           vy(i,j) =  -vt/(smallh*sin(theta(j))^2)
           vy(i,j)/= rad(i) ;angular speed 

        endfor
     endfor
     
     for k=0, nphi-1 do begin
        for j=0, ntheta-1 do begin
           for i=0, nrad-1 do begin            
              
              sint = sin(theta(j))
              cost = cos(theta(j))
              
              vr = vrad(i,j,k)
              vt = vtheta(i,j,k)

              vely =   vr*cost - sint*vt 
              
              machz(i,j,k) = vely/cs(i,j, k)
           endfor
        endfor
     endfor



     if keyword_set(direction) then begin
        vmag = sqrt(vx*vx + vy*vy)
        vx /= vmag
        vy /= vmag
     endif
     
     
     ;; if not keyword_set(nopert) then begin
     ;;    if not keyword_set(log) then den = den - data0
     ;;    den/=data0
     ;; endif
     
      if not keyword_set(entropy) then begin
         den2d(0:nrad-1,0:ntheta-1) = w(0:nrad-1,0:ntheta-1,azi1)
      endif else den2d(0:nrad-1,0:ntheta-1) = s(0:nrad-1,0:ntheta-1,azi1)




                                ;normalize w by its value at r=r0, z=0
     normW = abs(w(rgrid, ntheta-1,azi_center))
     den2d/= normW
     
     ;; if keyword_set(log) then den2d=alog10(den2d)
     
     z1 = 1d0/(tan(theta)*smallh)
     if not keyword_set(plotrange0) then begin
        temp = min(abs(xrange(0) - rplot(*)), r1)
        temp = min(abs(xrange(1) - rplot(*)), r2)
        
        temp = min(abs(yrange(0) - z1), t2)
        temp = min(abs(yrange(1) - z1), t1)
        
        plotrange=[min(den2d(r1:r2,t1:t2)),max(den2d(r1:r2,t1:t2))]
        
     endif else plotrange=plotrange0
     levels=plotrange(0)+(plotrange(1)-plotrange(0))*(dindgen(32)/31.)
     
     print, 'avg theta', mean(angle(r1:r2, t1:t2))    

     time=string(planetinfo(0,n)/torb,format='(F7.2)')
     azislicestring = string(azislice,format='(F5.3)')
     name1 = azislicestring 
;   name2 = azislicestring(1)
     
     loadct, ct,/silent
     
     set_plot, 'ps'
     device, filename=filepath(strcompress('stream_'+ks+'.ps',/remove_all) $
                               ,root_dir='.',subdir=[location]) $
             , bits_per_pixel=8,xsize=18, ysize=9,/color
     
     ztemp = 1d0/(tan(theta)*smallh)
     
     contour, den2d, rplot, ztemp , /fill $
              ,title=time+textoidl('P_0, ')+textoidl('\phi/2\pi='+name1), levels=levels $ 
              ,ymargin=[4,2],xmargin=[7,10],xrange=xrange,yrange=yrange, xtickinterval=xtickinterval $
              , ytickinterval=ytickinterval,xtitle=textoidl(xtitle), ytitle=textoidl('[h_{iso}tan\theta]^{-1}')
     
     colorbar, position=[0.88, 0.16, 0.93, 0.92],/vertical,/right,range=plotrange,format='(f5.2)'
     
     
     
     vx_small = congrid(vx, red(0), red(1))
     vy_small = congrid(vy, red(0), red(1))
     rad_small = congrid(rplot, red(0))
     zaxis = congrid(1d0/(smallh*tan(theta)), red(1))
     
     temp = min(abs(rad_small - xrange(0)), r1)
     temp = min(abs(rad_small - xrange(1)), r2)
     temp = min(abs(zaxis - yrange(0)), t2)
     temp = min(abs(zaxis - yrange(1)), t1)
     
;     r1 += 1
;     r2 -= 1
     
                                ;loadct,2
     
     velovect2, vx_small(r1:r2,t1:t2), vy_small(r1:r2,t1:t2), rad_small(r1:r2), zaxis(t1:t2), color=arrcolor,/overplot $
                , length=length,/isotropic, hsize=hsize
     
     ;; if keyword_set(name) then begin
     ;;     xyouts, xrange(0), 1.7, textoidl(name),charsize=1.5, charthick=6, color=255, alignment=0
     ;; endif
     
     
     
     device,/close
     fname = 'vel3d_rz_W.ps'
     device, filename=filepath(fname,root_dir='.',subdir=[location]) $
             ,/color, bits_per_pixel=8,ysize=4.5, xsize=8,xoffset=0,yoffset=0,/inches
     contour, den2d, rplot, ztemp ,title='nonlinear' $
              ,xmargin=[6,6],ymargin=[4,2],xrange=xrange,yrange=yrange, xtickinterval=xtickinterval $
              , ytickinterval=ytickinterval,xtitle=textoidl('r_{sph}/r_0'), ytitle=textoidl('[h_{iso}tan\theta]^{-1}') $
              , charsize = 1.5,/fill, levels=levels
     colorbar, position=[0.91, 0.2, 0.94, 0.9],/vertical,/right,range=plotrange,format='(f5.2)'

     if keyword_set(arrct) then begin
        loadct, arrct,/silent
     endif
     velovect, vx_small(r1:r2,*), vy_small(r1:r2,*), rad_small(r1:r2), zaxis(*),/overplot, color=arrcolor $
               , length=length, hsize=hsize, xmargin=[8,2],ymargin=[3.5,1.5],xrange=xrange,yrange=yrange, xtickinterval=xtickinterval $
               , ytickinterval=ytickinterval,xtitle=textoidl('r/r_0'), ytitle=textoidl('[h_{iso}tan\theta]^{-1}'), charsize = 1.5, thick=2

     device,/close

    
     fname = 'vel3d_rz_dvz_nofill.ps'
     set_plot,'ps'
     device, filename=filepath(fname,root_dir='.',subdir=[location]) $
             ,/color, bits_per_pixel=8,ysize=4.5, xsize=8,xoffset=0,yoffset=0,/inches
     velovect, vx_small(r1:r2,t1:t2), vy_small(r1:r2,t1:t2), rad_small(r1:r2), zaxis(t1:t2) $
               , length=length, hsize=hsize, xmargin=[8,2],ymargin=[3.5,1.5], color=0,xrange=xrange,yrange=yrange, xtickinterval=xtickinterval $
               , ytickinterval=ytickinterval,xtitle=textoidl('r/r_0'), ytitle=textoidl('[h_{iso}tan\theta]^{-1}'), charsize = 1.5, thick=4
     device,/close


     print, 'done '+ks
  endfor

stop

end
